generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model Click {
  id        Int       @id @default(autoincrement())
  url_id    String
  clickedAt DateTime? @default(now()) @db.Timestamp(0)
  url       Url       @relation(fields: [url_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "clicks_ibfk_1")

  @@index([url_id], map: "url_id")
}

model Url {
  id             String    @id @default(cuid()) @db.VarChar(36)
  title          String    @db.VarChar(255)
  originalUrl    String    @db.VarChar(255)
  shortCode      String    @unique @db.VarChar(255)
  shortUrl       String    @db.VarChar(255)
  countClick     Int       @default(0)
  active         Boolean   @default(false)
  user_id        String?   @db.VarChar(36)
  anonymous_id   String?   @db.VarChar(255)
  expirationDate DateTime? @db.Timestamp(0)
  clicks         Click[]
  user           User?     @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([user_id], map: "url_user_id_fkey")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String?   @db.Text
  role          Role      @default(user)
  image         String?
  accounts      Account[]
  urls          Url[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
